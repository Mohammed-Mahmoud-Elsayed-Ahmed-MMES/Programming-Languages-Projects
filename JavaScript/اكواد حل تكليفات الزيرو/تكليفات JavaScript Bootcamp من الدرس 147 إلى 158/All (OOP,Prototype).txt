<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  </head>
  <body>
    <script src="main.js"></script>
  </body>
</html>
------------------------------------------------------
/*class Car
{
    constructor(name, model, price) {
        this.n = name;
        this.m = model;
        this.p = price;
    }
    running(){
        return `Car Is Running Now`;
    }
    stopped(){
        return `Car Is Stopped`;
    }
}
let carOne = new Car("MG",2022,420000);
let carTwo = new Car("Fiat",2022,300000);
let carThree = new Car("BMW",2023,5000000);
console.log(`Car One Name Is ${carOne.n} And Model Is ${carOne.m} And Price Is ${carOne.p}\n${carOne.running()}`);
  // Needed Output

"Car One Name Is MG And Model Is 2022 And Price Is 420000"
"Car Is Running Now"*/

/* Two
class Phone {
    constructor(name, serial, price) {
        this.name = name;
        this.serial = serial;
        this.price = price;
    }
}

class Tablet extends Phone{
    constructor(name, serial, price,size)
    {
        super (name, serial, price);
        this.size = size;
    }
    fullDetails () {
        return `${this.name} Serial is ${this.serial} And Size Is ${this.size?this.size:"Unknown"}`;
    }
}

let TabletOne = new Tablet("iPad", 100200300, 1500, 12.9);
let TabletTwo = new Tablet("Nokia", 350450650, 800, 10.5);
let TabletThree = new Tablet("LG", 250450650, 650);

console.log(`${TabletOne.fullDetails()}`);
  // iPad Serial is 100200300 And Size Is 12.9

console.log(`${TabletTwo.fullDetails()}`);
  // Nokia Serial is 350450650 And Size Is 10.5

console.log(`${TabletThree.fullDetails()}`);
  // LG Serial is 250450650 And Size Is Unknown
*/

/* Three
// Edit The Class
class User {
    #c;
    constructor(username, card) {
        this.u = username;
        this.#c = card;
    }
    creditCard(){
        return this.#c.toString().match(/\d{4}/g).join("-");
    }
    get showData(){
        return `Hello ${this.u} Your Credit Card Number Is ${this.creditCard()}`
    }
}

  // Do Not Edit Anything Below

let userOne = new User("Osama", "1234-5678-1234-5678");
let userTwo = new User("Ahmed", "1234567812345678");
let userThree = new User("Ghareeb", 1234567812345678);

console.log(userOne.showData);
  // Hello Osama Your Credit Card Number Is 1234-5678-1234-5678

console.log(userTwo.showData);
  // Hello Ahmed Your Credit Card Number Is 1234-5678-1234-5678

console.log(userThree.showData);
  // Hello Ghareeb Your Credit Card Number Is 1234-5678-1234-5678

  console.log(userOne.c); // Prevent Accessing To Card Property Here
  // Undefined
*/

/* Four
String.prototype.addLove = function()
{
    return `I Love ${this} Web School`;
}

// Do Not Edit Below
let myStr = "Elzero";
console.log(myStr.addLove()); // I Love Elzero Web School
*/

/* Five
const myObj = {
    username: "Elzero",
    id: 100,
    score: 1000,
    country: "Egypt",
};

  // Write Your Code Here
Object.defineProperty(myObj, "score",
{
    writable: false,
})

Object.defineProperty(myObj, "id",
{
    enumerable : false,
})

delete myObj["country"];

myObj.score = 500;

for (let prop in myObj) {
    console.log(`${prop} => ${myObj[prop]}`);
}

console.log(myObj);

  // Needed Output

"username => Elzero"
"score => 1000"
{username: 'Elzero'; score: 1000; id: 100}
*/